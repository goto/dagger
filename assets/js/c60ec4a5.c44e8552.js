"use strict";(self.webpackChunkdagger=self.webpackChunkdagger||[]).push([[8866],{1124:(e,r,a)=>{a.d(r,{A:()=>n});const n=a.p+"assets/images/pre-processor-16c3b1a91c4e69e375eb3c41ac8c053e.png"},3845:(e,r,a)=>{a.r(r),a.d(r,{contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var n=a(8168),t=(a(6540),a(5680));const o={},s="Pre Processors",l={unversionedId:"advance/pre_processor",id:"advance/pre_processor",isDocsHomePage:!1,title:"Pre Processors",description:"Pre processors enable the users to add Flink operators/transformations before passing on the stream to the SQL query. Each stream registered on dagger can have chained pre processors. They will run and transform the data before SQL processing.",source:"@site/docs/advance/pre_processor.md",sourceDirName:"advance",slug:"/advance/pre_processor",permalink:"/dagger/docs/advance/pre_processor",editUrl:"https://github.com/goto/dagger/edit/master/docs/docs/advance/pre_processor.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Overview",permalink:"/dagger/docs/advance/overview"},next:{title:"Post Processors",permalink:"/dagger/docs/advance/post_processor"}},i=[{value:"<code>table_transformers</code>",id:"table_transformers",children:[]},{value:"<code>table_name</code>",id:"table_name",children:[]},{value:"<code>transformers</code>",id:"transformers",children:[]},{value:"<code>transformation_class</code>",id:"transformation_class",children:[]},{value:"<code>transformation_arguments</code>",id:"transformation_arguments",children:[]}],p={toc:i},c="wrapper";function d(e){let{components:r,...o}=e;return(0,t.yg)(c,(0,n.A)({},p,o,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"pre-processors"},"Pre Processors"),(0,t.yg)("p",null,"Pre processors enable the users to add Flink ",(0,t.yg)("a",{parentName:"p",href:"https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/stream/operators"},"operators/transformations")," before passing on the stream to the SQL query. Each stream registered on dagger can have chained pre processors. They will run and transform the data before SQL processing."),(0,t.yg)("h1",{id:"type-of-preprocessors"},"Type of Preprocessors"),(0,t.yg)("p",null,"Currently, there is only one type of pre-processor."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/dagger/docs/guides/use_transformer"},"Transformers"))),(0,t.yg)("h1",{id:"data-flow-in-preprocessors"},"Data flow in preprocessors"),(0,t.yg)("p",null,(0,t.yg)("img",{src:a(1124).A})),(0,t.yg)("p",null,"In the above diagram:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Data is getting ingested from two different streams."),(0,t.yg)("li",{parentName:"ul"},"The ",(0,t.yg)("inlineCode",{parentName:"li"},"InvalidRecordFilterTransformer")," is applied on both the streams in order to filter out invalid records."),(0,t.yg)("li",{parentName:"ul"},"Then the filtered records are passed to further operators."),(0,t.yg)("li",{parentName:"ul"},"Data is finally pushed to sink.")),(0,t.yg)("h1",{id:"configuration"},"Configuration"),(0,t.yg)("p",null,"Following variables need to be configured as part of ",(0,t.yg)("a",{parentName:"p",href:"/dagger/docs/reference/configuration#processor_preprocessor_config"},"PROCESSOR_PREPROCESSOR_CONFIG")," JSON"),(0,t.yg)("h2",{id:"table_transformers"},(0,t.yg)("inlineCode",{parentName:"h2"},"table_transformers")),(0,t.yg)("p",null,"A list of transformer configs."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Example value: ",(0,t.yg)("inlineCode",{parentName:"li"},'[{"table_name": "testtable","transformers": [{"transformation_class": "InvalidRecordFilterTransformer"}]}]')),(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"required"))),(0,t.yg)("h2",{id:"table_name"},(0,t.yg)("inlineCode",{parentName:"h2"},"table_name")),(0,t.yg)("p",null,"Table name for the transformer."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Example value: ",(0,t.yg)("inlineCode",{parentName:"li"},"testtable")),(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"required"))),(0,t.yg)("h2",{id:"transformers"},(0,t.yg)("inlineCode",{parentName:"h2"},"transformers")),(0,t.yg)("p",null,"List of transformers per table."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Example value: ",(0,t.yg)("inlineCode",{parentName:"li"},'[{"transformation_class": "InvalidRecordFilterTransformer"}]')),(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"required"))),(0,t.yg)("h2",{id:"transformation_class"},(0,t.yg)("inlineCode",{parentName:"h2"},"transformation_class")),(0,t.yg)("p",null,"Fully qualified name of the class to be used for transformation."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Example value: ",(0,t.yg)("inlineCode",{parentName:"li"},'"InvalidRecordFilterTransformer"')),(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"required"))),(0,t.yg)("h2",{id:"transformation_arguments"},(0,t.yg)("inlineCode",{parentName:"h2"},"transformation_arguments")),(0,t.yg)("p",null,"A key-value map required for parameters required for the custom transformation class."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Example value: ",(0,t.yg)("inlineCode",{parentName:"li"},'{"table_name": "testtable"}')),(0,t.yg)("li",{parentName:"ul"},"Type: ",(0,t.yg)("inlineCode",{parentName:"li"},"optional"))),(0,t.yg)("h1",{id:"sample-config"},"Sample config"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-properties"},'FLINK_SQL_QUERY = "SELECT data_1, data_2, event_timestamp from data_stream"\nPROCESSOR_PREPROCESSOR_ENABLE = true\nPROCESSOR_PREPROCESSOR_CONFIG = {\n  "table_transformers": [{\n    "table_name": "data_stream",\n    "transformers": [{\n      "transformation_class": "InvalidRecordFilterTransformer"\n    }]\n  }]\n}\n')))}d.isMDXComponent=!0},5680:(e,r,a)=>{a.d(r,{xA:()=>c,yg:()=>u});var n=a(6540);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var i=n.createContext({}),p=function(e){var r=n.useContext(i),a=r;return e&&(a="function"==typeof e?e(r):s(s({},r),e)),a},c=function(e){var r=p(e.components);return n.createElement(i.Provider,{value:r},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),g=t,u=d["".concat(i,".").concat(g)]||d[g]||m[g]||o;return a?n.createElement(u,s(s({ref:r},c),{},{components:a})):n.createElement(u,s({ref:r},c))}));function u(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var o=a.length,s=new Array(o);s[0]=g;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[d]="string"==typeof e?e:t,s[1]=l;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"}}]);