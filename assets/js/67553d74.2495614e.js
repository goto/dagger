"use strict";(self.webpackChunkdagger=self.webpackChunkdagger||[]).push([[7628],{1848:(e,r,o)=>{o.r(r),o.d(r,{contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>i});var t=o(8168),n=(o(6540),o(5680));const a={},c="Overview",s={unversionedId:"advance/overview",id:"advance/overview",isDocsHomePage:!1,title:"Overview",description:"The following section covers advance features of Dagger.",source:"@site/docs/advance/overview.md",sourceDirName:"advance",slug:"/advance/overview",permalink:"/dagger/docs/advance/overview",editUrl:"https://github.com/goto/dagger/edit/master/docs/docs/advance/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Architecture",permalink:"/dagger/docs/concepts/architecture"},next:{title:"Pre Processors",permalink:"/dagger/docs/advance/pre_processor"}},i=[{value:"Pre Processor",id:"pre-processor",children:[]},{value:"Post Processor",id:"post-processor",children:[]},{value:"Longbow",id:"longbow",children:[]},{value:"Longbow+",id:"longbow-1",children:[]},{value:"DARTS",id:"darts",children:[]},{value:"Security",id:"security",children:[]}],l={toc:i},d="wrapper";function g({components:e,...r}){return(0,n.yg)(d,(0,t.A)({},l,r,{components:e,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"overview"},"Overview"),(0,n.yg)("p",null,"The following section covers advance features of Dagger."),(0,n.yg)("h3",{id:"pre-processor"},(0,n.yg)("a",{parentName:"h3",href:"/dagger/docs/advance/pre_processor"},"Pre Processor")),(0,n.yg)("p",null,"Pre processors enable you to add Flink operators/transformations before passing on the stream to the SQL query."),(0,n.yg)("h3",{id:"post-processor"},(0,n.yg)("a",{parentName:"h3",href:"/dagger/docs/advance/post_processor"},"Post Processor")),(0,n.yg)("p",null,"Post Processors give the capability to do custom stream processing after the SQL processing is performed. Complex transformation, enrichment & aggregation use cases are difficult to execute & maintain using SQL. Post Processors solve this problem through code and/or configuration."),(0,n.yg)("h3",{id:"longbow"},(0,n.yg)("a",{parentName:"h3",href:"/dagger/docs/advance/longbow"},"Longbow")),(0,n.yg)("p",null,"Longbow enables you to perform large windowed aggregation. It uses ",(0,n.yg)("a",{parentName:"p",href:"https://cloud.google.com/bigtable"},"Bigtable")," for managing historical data and SQL based DSL for configuration."),(0,n.yg)("h3",{id:"longbow-1"},(0,n.yg)("a",{parentName:"h3",href:"/dagger/docs/advance/longbow_plus"},"Longbow+")),(0,n.yg)("p",null,"Longbow+ is an enhanced version of longbow. It has additional support for complex data types for long windowed aggregations."),(0,n.yg)("h3",{id:"darts"},(0,n.yg)("a",{parentName:"h3",href:"/dagger/docs/advance/DARTS"},"DARTS")),(0,n.yg)("p",null,"DARTS allows you to join streaming data from a reference data store. It supports reference data store in the form of a list or <key, value> map. It enables the refer-table with the help of UDFs which can be used in the SQL query. Currently we only support GCS as reference data source."),(0,n.yg)("h3",{id:"security"},(0,n.yg)("a",{parentName:"h3",href:"/dagger/docs/advance/security"},"Security")),(0,n.yg)("p",null,"Enable secure data access from ACL enabled kafka source using SASL (Simple Authentication Security Layer) authentication. Also enable data access from SSL/TLS enabled kafka source."))}g.isMDXComponent=!0},5680:(e,r,o)=>{o.d(r,{xA:()=>d,yg:()=>f});var t=o(6540);function n(e,r,o){return r in e?Object.defineProperty(e,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[r]=o,e}function a(e,r){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),o.push.apply(o,t)}return o}function c(e){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?a(Object(o),!0).forEach((function(r){n(e,r,o[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(o,r))}))}return e}function s(e,r){if(null==e)return{};var o,t,n=function(e,r){if(null==e)return{};var o,t,n={},a=Object.keys(e);for(t=0;t<a.length;t++)o=a[t],r.indexOf(o)>=0||(n[o]=e[o]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)o=a[t],r.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var i=t.createContext({}),l=function(e){var r=t.useContext(i),o=r;return e&&(o="function"==typeof e?e(r):c(c({},r),e)),o},d=function(e){var r=l(e.components);return t.createElement(i.Provider,{value:r},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var o=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),g=l(o),u=n,f=g["".concat(i,".").concat(u)]||g[u]||p[u]||a;return o?t.createElement(f,c(c({ref:r},d),{},{components:o})):t.createElement(f,c({ref:r},d))}));function f(e,r){var o=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=o.length,c=new Array(a);c[0]=u;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[g]="string"==typeof e?e:n,c[1]=s;for(var l=2;l<a;l++)c[l]=o[l];return t.createElement.apply(null,c)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"}}]);