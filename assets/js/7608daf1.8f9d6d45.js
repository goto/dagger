"use strict";(self.webpackChunkdagger=self.webpackChunkdagger||[]).push([[8842],{602:(e,a,n)=>{n.r(a),n.d(a,{contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=n(8168),t=(n(6540),n(5680));const l={},i="Transformers",o={unversionedId:"reference/transformers",id:"reference/transformers",isDocsHomePage:!1,title:"Transformers",description:"This page contains references for all the custom transformers available on Dagger.",source:"@site/docs/reference/transformers.md",sourceDirName:"reference",slug:"/reference/transformers",permalink:"/dagger/docs/reference/transformers",editUrl:"https://github.com/goto/dagger/edit/master/docs/docs/reference/transformers.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Metrics",permalink:"/dagger/docs/reference/metrics"},next:{title:"Udfs",permalink:"/dagger/docs/reference/udfs"}},s=[{value:"List of Transformers",id:"list-of-transformers",children:[{value:"ClearColumnTransformer",id:"clearcolumntransformer",children:[]},{value:"DeDuplicationTransformer",id:"deduplicationtransformer",children:[]},{value:"FeatureTransformer",id:"featuretransformer",children:[]},{value:"FeatureWithTypeTransformer",id:"featurewithtypetransformer",children:[]},{value:"HashTransformer",id:"hashtransformer",children:[]},{value:"InvalidRecordFilterTransformer",id:"invalidrecordfiltertransformer",children:[]},{value:"SQLTransformer",id:"sqltransformer",children:[]}]}],m={toc:s},u="wrapper";function p(e){let{components:a,...n}=e;return(0,t.yg)(u,(0,r.A)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"transformers"},"Transformers"),(0,t.yg)("p",null,"This page contains references for all the custom transformers available on Dagger."),(0,t.yg)("h2",{id:"list-of-transformers"},"List of Transformers"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/dagger/docs/reference/transformers#ClearColumnTransformer"},"ClearColumnTransformer")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/dagger/docs/reference/transformers#DeDuplicationTransformer"},"DeDuplicationTransformer")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/dagger/docs/reference/transformers#FeatureTransformer"},"FeatureTransformer")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/dagger/docs/reference/transformers#FeatureWithTypeTransformer"},"FeatureWithTypeTransformer")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/dagger/docs/reference/transformers#HashTransformer"},"HashTransformer")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/dagger/docs/reference/transformers#InvalidRecordFilterTransformer"},"InvalidRecordFilterTransformer")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"/dagger/docs/reference/transformers#SQLTransformer"},"SQLTransformer"))),(0,t.yg)("h3",{id:"clearcolumntransformer"},"ClearColumnTransformer"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Transformation Class:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ClearColumnTransformer")))),(0,t.yg)("li",{parentName:"ul"},"Contract: ",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"After Selecting columns by SQL, you need to reselect the desired columns with the help of an internal source. Following transformation arguments can be passed:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"targetColumnName"),": The field that needs to be cleared."))))),(0,t.yg)("li",{parentName:"ul"},"Functionality:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Allows clearing the specified column of data produced by the dagger."),(0,t.yg)("li",{parentName:"ul"},"Can be used only on ",(0,t.yg)("inlineCode",{parentName:"li"},"post-processor")))),(0,t.yg)("li",{parentName:"ul"},"Example:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"SQL:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},"SELECT\n  event_timestamp,\n  data1,\n  data2\nFROM\n  data_stream\n"))),(0,t.yg)("li",{parentName:"ul"},"POST PROCESSOR CONFIG:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},'{\n  "internal_source": [\n    {\n      "output_field": "*",\n      "value": "*",\n      "type": "sql"\n    }\n  ],\n  "transformers": [\n    {\n      "transformation_class": "ClearColumnTransformer",\n      "transformation_arguments": {\n        "targetColumnName": "data1"\n      }\n    }\n  ]\n}\n')))))),(0,t.yg)("h3",{id:"deduplicationtransformer"},"DeDuplicationTransformer"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Transformation Class:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"DeDuplicationTransformer")))),(0,t.yg)("li",{parentName:"ul"},"Contract: ",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"After Selecting columns by SQL, you need to reselect the desired columns with the help of an internal source. Following transformation arguments can be passed:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"key_column"),": This value will be used as the deduplication key (other events with the same key will be stopped). "),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"ttl_in_seconds"),": The TTL configuration will decide how long to keep the keys in memory. Once the keys are cleared from memory the data with the same keys will be sent again."))))),(0,t.yg)("li",{parentName:"ul"},"Functionality:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Allows deduplication of data produced by the dagger i.e records with the same key will not be sent again till the TTL expires."),(0,t.yg)("li",{parentName:"ul"},"Can be used both on ",(0,t.yg)("inlineCode",{parentName:"li"},"post-processor")," and ",(0,t.yg)("inlineCode",{parentName:"li"},"pre-processor")))),(0,t.yg)("li",{parentName:"ul"},"Example:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"SQL:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},"SELECT\n  data1,\n  data2\nFROM\n  data_stream\n"))),(0,t.yg)("li",{parentName:"ul"},"POST PROCESSOR CONFIG:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},'{\n  "internal_source": [\n    {\n      "output_field": "data1",\n      "value": "data1",\n      "type": "sql"\n    },\n    {\n      "output_field": "data2",\n      "value": "data2",\n      "type": "sql"\n    }\n  ],\n  "transformers": [\n    {\n      "transformation_arguments": {\n        "key_column": "data1",\n        "ttl_in_seconds": "3600"\n      },\n      "transformation_class": "DeDuplicationTransformer"\n    }\n  ]\n}\n')))))),(0,t.yg)("h3",{id:"featuretransformer"},"FeatureTransformer"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Transformation Class:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"FeatureTransformer")))),(0,t.yg)("li",{parentName:"ul"},"Contract: ",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"After Selecting columns by SQL, you need to reselect the desired columns with the help of an internal source. Following transformation arguments can be passed:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"keyColumnName"),": This value will be used to form the key of the feature. "),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"valueColumnName"),": This value will be used as a value in the feature."))))),(0,t.yg)("li",{parentName:"ul"},"Functionality:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Converts to feast Features from post processors."),(0,t.yg)("li",{parentName:"ul"},"Can be used only on ",(0,t.yg)("inlineCode",{parentName:"li"},"post-processor")))),(0,t.yg)("li",{parentName:"ul"},"Example:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"SQL:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},"SELECT \n  data1, \n  features \nFROM\n  data_stream\n"))),(0,t.yg)("li",{parentName:"ul"},"POST PROCESSOR CONFIG:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},'{\n  "internal_source": [\n    {\n      "output_field": "*",\n      "value": "*",\n      "type": "sql"\n    }\n  ],\n  "transformers": [\n    {\n      "transformation_arguments": {\n        "keyColumnName": "data1",\n        "valueColumnName": "features"\n      },\n      "transformation_class": "FeatureTransformer"\n    }\n  ]\n}\n')))))),(0,t.yg)("h3",{id:"featurewithtypetransformer"},"FeatureWithTypeTransformer"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Transformation Class:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"FeatureWithTypeTransformer")))),(0,t.yg)("li",{parentName:"ul"},"Contract: ",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"After Selecting columns by SQL, you need to reselect the desired columns with the help of an internal source. Following transformation arguments can be passed:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"outputColumnName"),": The column where the final feature will be written and ",(0,t.yg)("inlineCode",{parentName:"li"},"FeatureRow")," are synonyms with ",(0,t.yg)("inlineCode",{parentName:"li"},"FeaturesWithType")," UDF and a single feature is represented by an element in an array."))))),(0,t.yg)("li",{parentName:"ul"},"Functionality:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Converts to feast Features from post processors. This is required to do aggregation and feature transformation from a single dagger."),(0,t.yg)("li",{parentName:"ul"},"Can be used only on ",(0,t.yg)("inlineCode",{parentName:"li"},"post-processor")))),(0,t.yg)("li",{parentName:"ul"},"Example:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"SQL:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},"SELECT\n  data1,\n  data2\nFROM\n  data_stream\n"))),(0,t.yg)("li",{parentName:"ul"},"POST PROCESSOR CONFIG:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},'{\n  "internal_source": [\n    {\n      "output_field": "features",\n      "value": "test",\n      "type": "constant"\n    },\n    {\n      "output_field": "data1",\n      "value": "data1",\n      "type": "sql"\n    },\n    {\n      "output_field": "data2",\n      "value": "data2",\n      "type": "sql"\n    }\n  ],\n  "transformers": [\n    {\n      "transformation_class": "FeatureTransformer",\n      "transformation_arguments": {\n        "outputColumnName": "features",\n        "data": [\n          {\n            "keyColumnName": "data1",\n            "valueColumnName": "data2",\n            "type": "StringType"\n          }\n        ]\n      }\n    }\n  ]\n}\n')))))),(0,t.yg)("h3",{id:"hashtransformer"},"HashTransformer"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Transformation Class:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"HashTransformer")))),(0,t.yg)("li",{parentName:"ul"},"Contract: ",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"After Selecting columns by SQL, you need to reselect the desired columns with the help of an internal source. Following transformation arguments can be passed:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"maskColumns"),": A list of fields that need to be encrypted/masked."))))),(0,t.yg)("li",{parentName:"ul"},"Functionality:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Enables encryption on a set of fields as configured. Used in Data forwarding daggers to clone production data to integration environments with encryption on sensitive data fields. We are using SHA-256 hashing to encrypt data."),(0,t.yg)("li",{parentName:"ul"},"Can be used only on ",(0,t.yg)("inlineCode",{parentName:"li"},"post-processor")))),(0,t.yg)("li",{parentName:"ul"},"Limitations:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Currently support masking on Non-Complex Fields of Data type Integer, Big Integer, and String. However, you can encrypt nested fields of complex data using ",(0,t.yg)("inlineCode",{parentName:"li"},".")," notations. For example test_data.customer_id is a valid argument which will encrypt the customer_id inside test_data. "),(0,t.yg)("li",{parentName:"ul"},"All other Data types including Arrays, complex fields, and other primitive types like boolean are not supported."))),(0,t.yg)("li",{parentName:"ul"},"Example:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"SQL:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},"SELECT\n  event_timestamp,\n  test_data\nFROM\n  data_stream\n"))),(0,t.yg)("li",{parentName:"ul"},"POST PROCESSOR CONFIG:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},'{\n  "internal_source": [\n    {\n      "output_field": "*",\n      "value": "*",\n      "type": "sql"\n    }\n  ],\n  "transformers": [\n    {\n      "transformation_class": "HashTransformer",\n      "transformation_arguments": {\n        "maskColumns": [\n          "test_data.data1"\n        ]\n      }\n    }\n  ]\n}\n')))))),(0,t.yg)("h3",{id:"invalidrecordfiltertransformer"},"InvalidRecordFilterTransformer"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Transformation Class:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"InvalidRecordFilterTransformer")))),(0,t.yg)("li",{parentName:"ul"},"Contract: ",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Following transformation arguments can be passed:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"transformation_arguments"),": A key-value map required for parameters required for the custom transformation class."))))),(0,t.yg)("li",{parentName:"ul"},"Functionality:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Filter the invalid records produced by dagger."),(0,t.yg)("li",{parentName:"ul"},"Can be used only on ",(0,t.yg)("inlineCode",{parentName:"li"},"pre-processor")))),(0,t.yg)("li",{parentName:"ul"},"Example:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"SQL:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},"SELECT \n  data1, \n  data2, \n  event_timestamp \nFROM \n  data_stream\n"))),(0,t.yg)("li",{parentName:"ul"},"PRE PROCESSOR CONFIG:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},'{\n  "table_transformers": [\n    {\n      "table_name": "testtable",\n      "transformers": [\n        {\n          "transformation_class": "InvalidRecordFilterTransformer",\n          "transformation_arguments": "testtable"\n        }\n      ]\n    }\n  ]\n}\n')))))),(0,t.yg)("h3",{id:"sqltransformer"},"SQLTransformer"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Transformation Class:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"SQLTransformer")))),(0,t.yg)("li",{parentName:"ul"},"Contract: ",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"After Selecting columns by SQL, you need to reselect the desired columns with the help of an internal source. Following transformation arguments can be passed:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"sqlQuery"),": The SQL query for transformation"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"tableName"),"(optional): The table name to be used in the above SQL(default: data_stream)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"allowedLatenessInMs"),"(optional): The allowed lateness for the events streaming in Kafka(default: 0))"))))),(0,t.yg)("li",{parentName:"ul"},"Functionality:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Enables applying a SQL transformation on top of streaming data in post processors. Primarily useful if users want to apply SQL transformation/aggregation using fields added via External/Internal Post Processors."),(0,t.yg)("li",{parentName:"ul"},"Can be used only on ",(0,t.yg)("inlineCode",{parentName:"li"},"post-processor")))),(0,t.yg)("li",{parentName:"ul"},"Example:",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"SQL:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},"SELECT\n  data1,\n  data2,\n  rowtime\nFROM\n  data_stream\n"))),(0,t.yg)("li",{parentName:"ul"},"POST PROCESSOR CONFIG:",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},'{\n  "internal_source": [\n    {\n      "output_field": "data1",\n      "value": "data1",\n      "type": "sql"\n    },\n    {\n      "output_field": "rowtime",\n      "value": "rowtime",\n      "type": "sql"\n    },\n    {\n      "output_field": "data2",\n      "value": "data2",\n      "type": "sql"\n    }\n  ],\n  "transformers": [\n    {\n      "transformation_class": "SQLTransformer",\n      "transformation_arguments": {\n        "sqlQuery": "SELECT count(distinct data1) AS `count`, data2, TUMBLE_END(rowtime, INTERVAL \'60\' SECOND) AS event_timestamp FROM data_stream group by TUMBLE (rowtime, INTERVAL \'60\' SECOND), data2"\n      }\n    }\n  ]\n}\n')))))))}p.isMDXComponent=!0},5680:(e,a,n)=>{n.d(a,{xA:()=>u,yg:()=>d});var r=n(6540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=r.createContext({}),m=function(e){var a=r.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},u=function(e){var a=m(e.components);return r.createElement(s.Provider,{value:a},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},y=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=m(n),y=t,d=p["".concat(s,".").concat(y)]||p[y]||g[y]||l;return n?r.createElement(d,i(i({ref:a},u),{},{components:n})):r.createElement(d,i({ref:a},u))}));function d(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=n.length,i=new Array(l);i[0]=y;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[p]="string"==typeof e?e:t,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"}}]);